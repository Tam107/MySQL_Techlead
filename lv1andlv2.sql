use sakila;


-- level 1 
-- 1. query first and last name of all actors
select first_name, last_name from actor; 

-- 2. query titles of all films and rental rates and replacement costs
select title, rental_rate, replacement_cost from film;

-- 3. return top 5 most rented films 
select * from film order by rental_rate desc;

-- 4. average rental duration for each category of film

SELECT 
    c.name AS category_name,
    AVG(f.rental_duration) AS avg_rental_duration
FROM film f
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY c.name;

-- 5. SQL query to return the names and addresses of all customers who have rented a film
select distinct c.first_name, c.last_name, a.address from customer c
join address a on c.address_id = a.address_id 
join rental r on c.customer_id = r.customer_id where year(r.rental_date) = 2005;

-- 6. Write a SQL query to return the revenue generated by each store in the database for the year 2021.
select s.store_id, SUM(p.amount) as revenue from store s join inventory i on s.store_id = i.store_id
join rental r on i.inventory_id =  r.inventory_id join payment p on p.rental_id = r.rental_id where year(p.payment_date) = 2005 group by s.store_id;

-- 7 Write a SQL query to return the names of all actors who have appeared in more than 20 films in the database.
select a.first_name from actor a join film_actor fa on a.actor_id = fa.actor_id 
group by a.actor_id, a.first_name
having count(fa.film_id) >= 20; 

-- 8 Write a SQL query to return the titles of all films in the database that have a rating of 'PG-13' and a length of more than 120 minutes.
select title from film where rating = 'PG-13' and length > 120;

-- level 2
-- 1. Write a SQL query to return the top 10 customers who have generated the most revenue for the store, including their names and total revenue generated.
select c.first_name, c.last_name, sum(p.amount) as total_revenue from customer c join payment p where c.customer_id = p.customer_id 
group by c.customer_id, c.first_name, c.last_name order by total_revenue desc limit 10;

-- 2. Write a SQL query to return the names and contact information of all customers who have rented films in all categories in the database.
select c.first_name, c.last_name, c.email from customer c join store s on c.store_id = s.store_id;

-- 3. Write a SQL query to return the titles of all films in the database that have been rented at least once but never returned.
select distinct f.title, i.inventory_id from film f join inventory i on f.film_id = i.film_id 
join rental r on r.inventory_id = i.inventory_id where r.return_date is null;

-- 4. Write a SQL query to return the names of all actors who have appeared in at least one film in each category in the database.
select a.first_name, a.last_name from actor a 
join film_actor fa on a.actor_id = fa.actor_id 
join film_category fc on fa.film_id = fc.film_id
group by a.actor_id, a.first_name, a.first_name
HAVING COUNT(DISTINCT fc.category_id) = (SELECT COUNT(*) FROM category);

-- 5. Write a SQL query to return the names of all customers who have rented the same film more than once in a single transaction, along with the number of times they rented it.
select a.first_name, a.last_name from actor a 
join film_actor fa on a.actor_id = fa.actor_id
join film_category fc on fa.film_id = fc.film_id
group by a.actor_id, a.first_name, a.last_name
having count(distinct fc.category_id) = (select count(*) from category);

-- 6. Write a SQL query to return the total revenue generated by each actor in the database, based on the rental fees of the films they have appeared in.
select a.first_name, a.last_name, SUM(p.amount) as total_revenue from actor a
join film_actor fa on a.actor_id = fa.actor_id
join inventory i on fa.film_id = i.film_id
join rental r on i.inventory_id = r.inventory_id
join payment p on r.rental_id = p.rental_id
group by a.actor_id, a.first_name, a.last_name
order by total_revenue desc;

-- 7 Write a SQL query to return the names of all actors who have appeared in at least one film with a rating of 'R', but have never appeared in a film with a rating of 'G'.
select distinct a.first_name, a.last_name from actor a 
join film_actor fa on a.actor_id = fa.actor_id
join film f on f.film_id = fa.film_id where f.rating like 'R' and f.rating != 'G';

-- 8. Write a SQL query to return the titles of all films in the database that have been rented by more than 50 customers, but have never been rented by the same customer more than once.
SELECT f.film_id, f.title, COUNT(DISTINCT r.customer_id) AS customer_count
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY f.film_id, f.title
HAVING COUNT(DISTINCT r.customer_id) > 50;

-- 9. Write a SQL query to return the names of all customers who have rented a film from a category they have never rented from before.
SELECT 
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
    cat.name AS category,
    r.rental_date
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category cat ON fc.category_id = cat.category_id
ORDER BY c.customer_id, r.rental_date;

-- 10 
SELECT DISTINCT r.customer_id
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
WHERE c.name = 'Action';
